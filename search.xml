<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>5G SA Call Flow</title>
    <url>/2022/01/02/5G-SA-Call-Flow/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在核心網各網元E2E聯調時, 熟悉信令流程是查漏補缺必備的技能。</p>
<p>這篇文章將結合3GPP R15相關内容對5G SA信令流程進行簡單分析. </p>
<span id="more"></span>

<h2 id="5G-SA-注冊"><a href="#5G-SA-注冊" class="headerlink" title="5G SA 注冊"></a>5G SA 注冊</h2><p>下圖注冊流程截于23.502 </p>
<p><img src="/2022/01/02/5G-SA-Call-Flow/%E6%B3%A8%E5%86%8A%E6%B5%81%E7%A8%8B-R15.png"></p>
<h3 id="1-SA用戶UE打開手機嘗試進行數據連接的時候，首先是要發消息給基站RAN，麻煩RAN幫忙把UE的請求告訴給核心網吧。"><a href="#1-SA用戶UE打開手機嘗試進行數據連接的時候，首先是要發消息給基站RAN，麻煩RAN幫忙把UE的請求告訴給核心網吧。" class="headerlink" title="1. SA用戶UE打開手機嘗試進行數據連接的時候，首先是要發消息給基站RAN，麻煩RAN幫忙把UE的請求告訴給核心網吧。"></a>1. SA用戶UE打開手機嘗試進行數據連接的時候，首先是要發消息給基站RAN，麻煩RAN幫忙把UE的請求告訴給核心網吧。</h3><p>那既然UE想要被核心網接納， 就要傳遞一些信息，幫助核心網認定UE是白名單。 這裏3GPP定義了一些參數，是UE可能會携帶的。</p>
<p>下面參數截于23.502 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AN message (AN parameters， Registration Request (Registration <span class="built_in">type</span>， SUCI or 5G-GUTI or PEI， last visited TAI (<span class="keyword">if</span> available)， Security parameters， Requested NSSAI， [Mapping Of Requested NSSAI]， Default </span><br><span class="line">Configured NSSAI Indication， UE Radio Capability Update， UE MM Core Network Capability， PDU Session status， List Of PDU Sessions To Be Activated， Follow-on request， MICO mode preference， Requested DRX </span><br><span class="line">parameters， [LADN DNN(s) or Indicator Of Requesting LADN Information]， [NAS message container]) and UE Policy Container (the list of PSIs， indication of UE support <span class="keyword">for</span> ANDSP and the operating system identifier)).</span><br></pre></td></tr></table></figure>

<p>官方文檔需要考慮多個場景，往往參數冗雜。 按照生活中的邏輯是， UE帶上來一個手機號碼就可以，與手機號相關的就是參數裏面的SUCI or 5G-GUTI。</p>
<p>在開卡時候，運營商會分配給用戶一個手機號，每個手機號碼會對應一個SUPI， 而SUCI就是UE通過ECIE-S scheme生成的，隨後携帶在消息中。 對於5G-GUTI，是UE第一次注冊之後，核心網給UE分配的一個標識。</p>
<p>這樣就可以延伸出兩個場景： UE第一次注冊和UE注冊完成后第二次注冊。</p>
<p>現在換個角度去核心網。 如果UE第一次注冊携帶SUCI， 核心網如果檢測到這個SUCI不合法，就可以不讓UE上網，如果檢測通過，則放行。 如果UE注冊携帶5G-GUTI，核心網則知道UE之前已經注冊過，可以去找之前的核心網網元拿UE信息。</p>
<p>當然，實際上判斷邏輯比這個複雜。如果UE携帶了Requested NSSAI，核心網則不止判斷UE號碼，而是會同時判斷NSSAI的值。</p>
<p>下面參數解釋截于23.501 &amp; 23.503</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PEI Permanent Equipment Identifier</span><br><span class="line"></span><br><span class="line">DNN Data Network Name </span><br><span class="line"></span><br><span class="line">LADN Local Area Data Network </span><br><span class="line"></span><br><span class="line">DRX Discontinuous Reception</span><br><span class="line"></span><br><span class="line">MICO Mobile Initiated Connection Only</span><br><span class="line"></span><br><span class="line">ANDSP Access Network Discovery &amp; Selection Policy </span><br></pre></td></tr></table></figure>

<h3 id="2-RAN收到消息說UE要幫忙后，就熱心的把消息轉給核心網。"><a href="#2-RAN收到消息說UE要幫忙后，就熱心的把消息轉給核心網。" class="headerlink" title="2. RAN收到消息說UE要幫忙后，就熱心的把消息轉給核心網。"></a>2. RAN收到消息說UE要幫忙后，就熱心的把消息轉給核心網。</h3><p>RAN對接的核心網網元在5G裏面叫AMF，他優先通過5G-GUTI裏蘊含的5G-S-TMSI和GUAMI信息找到合適的AMF。 那如果是SUCI呢，因爲RAN和AMF之間的N2接口基於SCTP,建立的時候是RAN測發起setup，所以RAN測會配置AMF的信息，可以從裏面根據優先級選擇對應的AMF。</p>
<p>關於5G-GUTI中5G-S-TMSI和GUAMI</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">5G-GUTI = GUAMI+ 5G-TMSI</span><br><span class="line"></span><br><span class="line">GUAMI = MCC+ MNC+ AMF Identifier</span><br><span class="line"></span><br><span class="line">AMF Identifier = AMF Region ID+ AMF Set ID+ AMF Pointer</span><br><span class="line"></span><br><span class="line">5G-S-TMSI = AMF Set ID+ AMF Pointer+ 5G-TMSI</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-RAN測找到合適的接頭AMF后，就會把UE的消息透傳給AMF。"><a href="#3-RAN測找到合適的接頭AMF后，就會把UE的消息透傳給AMF。" class="headerlink" title="3. RAN測找到合適的接頭AMF后，就會把UE的消息透傳給AMF。"></a>3. RAN測找到合適的接頭AMF后，就會把UE的消息透傳給AMF。</h3><p>同時，如果RAN是NG-RAN, 則會在UE消息基礎上加一些位置信息。</p>
<h3 id="4-Conditional-當從5G-GUTI得出UE之前是找其他的AMF辦理的注冊，則當前AMF去找之前的AMF了解情況。"><a href="#4-Conditional-當從5G-GUTI得出UE之前是找其他的AMF辦理的注冊，則當前AMF去找之前的AMF了解情況。" class="headerlink" title="4. [Conditional]當從5G-GUTI得出UE之前是找其他的AMF辦理的注冊，則當前AMF去找之前的AMF了解情況。"></a>4. [Conditional]當從5G-GUTI得出UE之前是找其他的AMF辦理的注冊，則當前AMF去找之前的AMF了解情況。</h3><h3 id="5-Conditional-如果舊的AMF有相應的UE信息，就會返回給當前的AMF。"><a href="#5-Conditional-如果舊的AMF有相應的UE信息，就會返回給當前的AMF。" class="headerlink" title="5. [Conditional]如果舊的AMF有相應的UE信息，就會返回給當前的AMF。"></a>5. [Conditional]如果舊的AMF有相應的UE信息，就會返回給當前的AMF。</h3><h3 id="6-Conditional-如果AMF無法根據5G-GUTI從當前或者舊的AMF獲取到SUCI-則應該發起request去要SUCI號碼。"><a href="#6-Conditional-如果AMF無法根據5G-GUTI從當前或者舊的AMF獲取到SUCI-則應該發起request去要SUCI號碼。" class="headerlink" title="6. [Conditional]如果AMF無法根據5G-GUTI從當前或者舊的AMF獲取到SUCI,則應該發起request去要SUCI號碼。"></a>6. [Conditional]如果AMF無法根據5G-GUTI從當前或者舊的AMF獲取到SUCI,則應該發起request去要SUCI號碼。</h3><h3 id="7-Conditional-既然核心網測要求了，UE就要回答。"><a href="#7-Conditional-既然核心網測要求了，UE就要回答。" class="headerlink" title="7. [Conditional]既然核心網測要求了，UE就要回答。"></a>7. [Conditional]既然核心網測要求了，UE就要回答。</h3><h3 id="8-AMF收到RAN這個中間人帶上來的消息後，打開看了一眼……"><a href="#8-AMF收到RAN這個中間人帶上來的消息後，打開看了一眼……" class="headerlink" title="8. AMF收到RAN這個中間人帶上來的消息後，打開看了一眼……"></a>8. AMF收到RAN這個中間人帶上來的消息後，打開看了一眼……</h3><p>AMF發現這個用戶在我眼裏合法，於是去找其他網元的兄弟去幫忙鑒定。鑒定什麽呢?</p>
<p>SIM卡製造的過程中，每個卡都是有特殊Key值和OP值，核心網需要去鑒權UE的號碼和SIM卡中的值是否對應。</p>
<p>5G裏鑒權的網元是AUSF， AMF會根據SUPI或者SUCI去找對應的AUSF, 而且找的過程還很神秘， 要經過一個中間人NRF。</p>
<p>這個NRF好比是黑道上的綫人，不去直接參與業務交易，但是他手裏有各個大佬的聯絡方式，後面的AMF找UDM,找SMF等等，都要先聯係他。於是AMF通過NRF找到了AUSF。</p>
<h3 id="9-AMF看完消息之後，通過SBI接口協議把一些有價值的内容給到AUSF"><a href="#9-AMF看完消息之後，通過SBI接口協議把一些有價值的内容給到AUSF" class="headerlink" title="9. AMF看完消息之後，通過SBI接口協議把一些有價值的内容給到AUSF."></a>9. AMF看完消息之後，通過SBI接口協議把一些有價值的内容給到AUSF.</h3><p>5G鑒權的詳細過程希望日後專門可以寫一寫，這裏就略過. 先假裝AUSF完成了對UE的鑒權。</p>
<h3 id="10-Conditional-收到鑒權消息后-當前AMF如果同意辦理UE業務，則會通知到舊的AMF。"><a href="#10-Conditional-收到鑒權消息后-當前AMF如果同意辦理UE業務，則會通知到舊的AMF。" class="headerlink" title="10. [Conditional]收到鑒權消息后, 當前AMF如果同意辦理UE業務，則會通知到舊的AMF。"></a>10. [Conditional]收到鑒權消息后, 當前AMF如果同意辦理UE業務，則會通知到舊的AMF。</h3><h3 id="11-Conditional-如果UE的PEI到當前步驟沒有從舊的AMF或者自身携帶的消息中獲得，AMF就不樂意，需要找UE要PEI的信息。"><a href="#11-Conditional-如果UE的PEI到當前步驟沒有從舊的AMF或者自身携帶的消息中獲得，AMF就不樂意，需要找UE要PEI的信息。" class="headerlink" title="11. [Conditional]如果UE的PEI到當前步驟沒有從舊的AMF或者自身携帶的消息中獲得，AMF就不樂意，需要找UE要PEI的信息。"></a>11. [Conditional]如果UE的PEI到當前步驟沒有從舊的AMF或者自身携帶的消息中獲得，AMF就不樂意，需要找UE要PEI的信息。</h3><h3 id="12-Optionally-看各大廠家怎麽設定了-如果需要進行PEI的check-就加上這一次交互。"><a href="#12-Optionally-看各大廠家怎麽設定了-如果需要進行PEI的check-就加上這一次交互。" class="headerlink" title="12. [Optionally]看各大廠家怎麽設定了,如果需要進行PEI的check,就加上這一次交互。"></a>12. [Optionally]看各大廠家怎麽設定了,如果需要進行PEI的check,就加上這一次交互。</h3><h3 id="13-14-AUSF告訴AMF這個合法之後，AMF還要去讓核心網其他的兄弟看看其他的信息。"><a href="#13-14-AUSF告訴AMF這個合法之後，AMF還要去讓核心網其他的兄弟看看其他的信息。" class="headerlink" title="13-14. AUSF告訴AMF這個合法之後，AMF還要去讓核心網其他的兄弟看看其他的信息。"></a>13-14. AUSF告訴AMF這個合法之後，AMF還要去讓核心網其他的兄弟看看其他的信息。</h3><p>這裏就又麻煩NRF去找一個叫UDM的網元，UDM後端連著一個數據庫UDR，裏面有一個小本本，記錄這UE的簽約信息。包含UE簽約速率，切片信息，APN信息等。</p>
<p>比如AMF通過消息找UDM后發現UE簽約的切片是sd 1 sst 1，結果AMF一看你這UE帶上來的怎麽是sd 1 sst 100。即使UE SIM鑒權通過，也會因爲簽約信息被拒絕。</p>
<p>再比如，因爲AMF訂閲了UDM，那麽當我兒子天天用手機打游戲，不好好學習時，我去營業廳把這個卡簽約的internet APN給刪掉。這個時候UDM就通過Notify，告訴AMF，這個手機的簽約不再有這個APN，之後UE則無法通過這個APN注冊。</p>
<h3 id="15-16-Optionally-同樣看各大廠家怎麽設定。-如果需要AMF去找PCF獲取介入策略，就再麻煩一下NRF。"><a href="#15-16-Optionally-同樣看各大廠家怎麽設定。-如果需要AMF去找PCF獲取介入策略，就再麻煩一下NRF。" class="headerlink" title="15-16. [Optionally]同樣看各大廠家怎麽設定。 如果需要AMF去找PCF獲取介入策略，就再麻煩一下NRF。"></a>15-16. [Optionally]同樣看各大廠家怎麽設定。 如果需要AMF去找PCF獲取介入策略，就再麻煩一下NRF。</h3><h3 id="17-Conditional-簽約驗證完成后，AMF檢測到UE相關信息在SMF上時則會觸發。"><a href="#17-Conditional-簽約驗證完成后，AMF檢測到UE相關信息在SMF上時則會觸發。" class="headerlink" title="17. [Conditional]簽約驗證完成后，AMF檢測到UE相關信息在SMF上時則會觸發。"></a>17. [Conditional]簽約驗證完成后，AMF檢測到UE相關信息在SMF上時則會觸發。</h3><p>當step1,中消息體携帶List Of PDU Sessions To Be Activated時，AMF會發送Nsmf_PDUSession_UpdateSMContext給SMF去激活會話。</p>
<h3 id="18-19-Conditional-當存在舊的AMF告訴當前AMF-UE是通過Non-3GPP接入方式即N3IWF時，并且同一PLMN下，當前AMF觸發該流程。"><a href="#18-19-Conditional-當存在舊的AMF告訴當前AMF-UE是通過Non-3GPP接入方式即N3IWF時，并且同一PLMN下，當前AMF觸發該流程。" class="headerlink" title="18-19. [Conditional]當存在舊的AMF告訴當前AMF UE是通過Non-3GPP接入方式即N3IWF時，并且同一PLMN下，當前AMF觸發該流程。"></a>18-19. [Conditional]當存在舊的AMF告訴當前AMF UE是通過Non-3GPP接入方式即N3IWF時，并且同一PLMN下，當前AMF觸發該流程。</h3><h3 id="19a-b-c-Conditional-如果觸發了18-19，説明UE通過Non-3GPP接入，需要再次訂閲UDM，修改接入類型。"><a href="#19a-b-c-Conditional-如果觸發了18-19，説明UE通過Non-3GPP接入，需要再次訂閲UDM，修改接入類型。" class="headerlink" title="19a.b.c. [Conditional]如果觸發了18-19，説明UE通過Non-3GPP接入，需要再次訂閲UDM，修改接入類型。"></a>19a.b.c. [Conditional]如果觸發了18-19，説明UE通過Non-3GPP接入，需要再次訂閲UDM，修改接入類型。</h3><h3 id="21-經過這一系列的交接，AMF認可了這個UE，於是告訴UE-你的注冊請求，我接受了"><a href="#21-經過這一系列的交接，AMF認可了這個UE，於是告訴UE-你的注冊請求，我接受了" class="headerlink" title="21. 經過這一系列的交接，AMF認可了這個UE，於是告訴UE,你的注冊請求，我接受了!"></a>21. 經過這一系列的交接，AMF認可了這個UE，於是告訴UE,你的注冊請求，我接受了!</h3><p>同時下發了一些參數同step1 呼應。 下面參數截于23.502 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">5G-GUTI, Registration Area, Mobility restrictions, PDU Session status, </span><br><span class="line">Allowed NSSAI, [Mapping Of Allowed NSSAI], [Configured NSSAI <span class="keyword">for</span> the Serving PLMN], [Mapping Of Configured NSSAI], [rejected S-NSSAIs], Periodic Registration Update timer, LADN Information and accepted MICO mode, IMS Voice over PS session supported Indication, </span><br><span class="line">Emergency Service Support indicator, Accepted DRX parameters, Network support of Interworking without N26, Access Stratum Connection Establishment NSSAI Inclusion Mode, Network Slicing Subscription Change Indication, Operator-defined access category definitions,</span><br><span class="line">[List of equivalent PLMNs]). The Allowed NSSAI <span class="keyword">for</span> the Access Type <span class="keyword">for</span> the UE is included <span class="keyword">in</span> the N2 message carrying the Registration Accept message.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="22-UE回復AMF，説明注冊完成，謝謝你"><a href="#22-UE回復AMF，説明注冊完成，謝謝你" class="headerlink" title="22. UE回復AMF，説明注冊完成，謝謝你!"></a>22. UE回復AMF，説明注冊完成，謝謝你!</h3>]]></content>
      <tags>
        <tag>5G</tag>
      </tags>
  </entry>
  <entry>
    <title>MACVlAN + OVS</title>
    <url>/2021/12/24/MacValn-OVS/</url>
    <content><![CDATA[<h2 id="Backgroud"><a href="#Backgroud" class="headerlink" title="Backgroud"></a>Backgroud</h2><p>I used to build an openstack env, and when start to learn K8s, i create a K8s cluster base on openstack.</p>
<p>Recently i deployed a kind of pods using MACVALN network to communicate other pods, and i confused how the MACVLAN + OVS works.</p>
<p>Then i try to figure how the message flow goes. This blog will share what i find as a reference.</p>
<span id="more"></span>

<h2 id="MACVLAN-Concept"><a href="#MACVLAN-Concept" class="headerlink" title="MACVLAN Concept"></a>MACVLAN Concept</h2><p>MACVLAN as a CNI plugin use on the K8s, on my point it’s main function is net interface virtualization to make one net interface act as few net interfaces.</p>
<p>In my case, the pod has eth0 and eth1, i set the eth1 to use MACVLAN tech. Then i will have eth1.xx1, eth1.xx2 interface to work. These interfaces were divided into different vlan and interface ip.</p>
<h2 id="MACVLAN-Understanding"><a href="#MACVLAN-Understanding" class="headerlink" title="MACVLAN Understanding"></a>MACVLAN Understanding</h2><p>After pod Running, login the the pod check the eth1 driver, should be MACVLAN</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.4<span class="comment"># ethtool -i eth1    </span></span><br><span class="line">driver: macvlan</span><br><span class="line">version: 0.1</span><br><span class="line">firmware-version: </span><br><span class="line">bus-info: </span><br><span class="line">supports-statistics: no</span><br><span class="line">supports-test: no</span><br><span class="line">supports-eeprom-access: no</span><br><span class="line">supports-register-dump: no</span><br><span class="line">supports-priv-flags: no</span><br></pre></td></tr></table></figure>

<p>Check the net interface detail, will find fews named like eth1.xxx. The xxx is same as VLAN num and the subnet created before the node created. These interface are the virtualization interfaces and using the same MAC address of eth1.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.4<span class="comment"># ip a </span></span><br><span class="line">7: eth1@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 2090 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 72:<span class="built_in">fc</span>:af:9b:f0:82 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::76fa:affc:fe7c:f082/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">8: eth1.200@eth1: &lt;BROADCAST,UP,LOWER_UP&gt; mtu 2090 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 72:<span class="built_in">fc</span>:af:9b:f0:82 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 178.27.32.91/25 brd 178.27.32.127 scope global eth1.200</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::76fa:affc:fe7c:f082/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">9: eth1.201@eth1: &lt;BROADCAST,UP,LOWER_UP&gt; mtu 2090 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 72:<span class="built_in">fc</span>:af:9b:f0:82 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 178.27.26.91/25 brd 178.27.26.127 scope global eth1.201</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::76fa:affc:fe7c:f082/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<p>Due to MACVLAN belongs to external network CNI and has the unique namespace, we can find the relation between pod net interface and node interface.</p>
<p>Through the output above, we can see the pod eth1 link-netnsid is 0. Using the ip netns list can see the netnsid info on the node.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node-1<span class="comment"># ip netns list </span></span><br><span class="line">cni-f667d2d0-f5a8-0fb3-345f-bc99a6b4ef30 (id: 0)</span><br><span class="line">cni-f667d2d0-f5a8-0fb3-345f-bcasdcse2dd0 (id: 1)</span><br><span class="line"></span><br><span class="line">node-1<span class="comment"># ip a | grep -B 1 cni-f667d2d0-f5a8-0fb3-345f-bc99a6b4ef30</span></span><br><span class="line">22: calid4101c0e062@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 2070 qdisc noqueue state UP group default </span><br><span class="line">    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netns cni-f667d2d0-f5a8-0fb3-345f-bc99a6b4ef30</span><br></pre></td></tr></table></figure>

<p>So far we can assume the pod can send the message out from the MACVLAN interface to the node device calid4101c0e062, the next question is how the node pass message to external physical router.</p>
<h2 id="OVS-Concept"><a href="#OVS-Concept" class="headerlink" title="OVS Concept"></a>OVS Concept</h2><p>OVS means Open vSwitch which can operate both as a soft switch running within the hypervisor, and as the control stack for switching.</p>
<p>As i understand, all the VM deployed will connect to the OVS, and the OVS will manage the massive VM’s interface aiming to forward the message.</p>
<p>Then i found few command to help me understand and try to combine with MACVLAN.</p>
<h2 id="OVS-Understanding"><a href="#OVS-Understanding" class="headerlink" title="OVS Understanding"></a>OVS Understanding</h2><p>When we talk about MACVLAN, the virtualization net interface will bind different VLAN and the VLAN subnet need create before the node create.</p>
<p>Base on this, we can try to find which port go through the VLAN.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openstack-1<span class="comment"># neutron port-list  | grep node-1</span></span><br><span class="line">| cceab3c1-77dd-499d-a1d5-ce12233vef60 | node-1-port-1        | 891929b8ecec48279ec8e72ba1233bde | fa:16:3c:1e:d4:c1 </span><br><span class="line"></span><br><span class="line">openstack-1<span class="comment"># openstack network trunk show node-1-trunk-port-1</span></span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------+</span><br><span class="line">| Field           | Value                                                                                            |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------+</span><br><span class="line">| admin_state_up  | UP                                                                                               |</span><br><span class="line">| created_at      |                                                                                                  |</span><br><span class="line">| description     |                                                                                                  |</span><br><span class="line">| id              | acd37579-8ebb-48db-95d3-79dd23026488                                                             |</span><br><span class="line">| name            | node-1-trunk-port-1                                                                              |</span><br><span class="line">| port_id         | cceab3c1-77dd-499d-a1d5-ce12233vef60                                                             |</span><br><span class="line">| revision_number | 4                                                                                                |</span><br><span class="line">| status          | ACTIVE                                                                                           |</span><br><span class="line">| sub_ports       | port_id=<span class="string">&#x27;6d9aa1ce-14ce-4d14-b9c7-a324a01b544d&#x27;</span>, segmentation_id=<span class="string">&#x27;201&#x27;</span>, segmentation_type=<span class="string">&#x27;vlan&#x27;</span> |</span><br><span class="line">|                 | port_id=<span class="string">&#x27;4c5fb20a-149e-4ba9-aaf8-f6aes12d7b7f&#x27;</span>, segmentation_id=<span class="string">&#x27;200&#x27;</span>, segmentation_type=<span class="string">&#x27;vlan&#x27;</span> |</span><br></pre></td></tr></table></figure>

<p>The cceab3c1-77dd-499d-a1d5-ce12233vef60 is the port id, if all VM connect to the OVS, we must can find this id on OVS.</p>
<p>Login in the compute which one deployed the node.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">compute-1<span class="comment"># ovs-vsctl list Interface  | grep cceab3c1-77dd-499d-a1d5-ce12233vef60</span></span><br><span class="line">external_ids        : &#123;attached-mac=<span class="string">&quot;fa:16:3c:1e:d4:c1&quot;</span>, iface-id=<span class="string">&quot;cceab3c1-77dd-499d-a1d5-ce12233vef60&quot;</span>, iface-status=active, vm-uuid=<span class="string">&quot;e5514f47-936d-4fd4-b2e8-dasd31a8942f&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>We can see the MAC address is same as the result neutron port-list. Then let us find more info about the interface.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">compute-1<span class="comment"># ovs-vsctl list Interface | grep -A 15 cceab3c1-77dd-499d-a1d5-ce12233vef60</span></span><br><span class="line">external_ids        : &#123;attached-mac=<span class="string">&quot;fa:16:3c:1e:d4:c1&quot;</span>, iface-id=<span class="string">&quot;cceab3c1-77dd-499d-a1d5-ce12233vef60&quot;</span>, iface-status=active, vm-uuid=<span class="string">&quot;e5514f47-936d-4fd4-b2e8-dasd31a8942f&quot;</span>&#125;</span><br><span class="line">ifindex             : 7898202</span><br><span class="line">ingress_policing_burst: 0</span><br><span class="line">ingress_policing_rate: 0</span><br><span class="line">lacp_current        : []</span><br><span class="line">link_resets         : 0</span><br><span class="line">link_speed          : []</span><br><span class="line">link_state          : up</span><br><span class="line">lldp                : &#123;&#125;</span><br><span class="line">mac                 : []</span><br><span class="line">mtu                 : 2090</span><br><span class="line">mtu_request         : 2090</span><br><span class="line">name                : <span class="string">&quot;vhuaaeab3c1-34&quot;</span></span><br><span class="line"></span><br><span class="line">compute-1<span class="comment"># ovs-vsctl list Port  | grep -B 15 vhuaaeab3c1-34</span></span><br><span class="line">_uuid               : 4edf0fc5-5ccf-44c4-b5f4-0fdaeds12e1b</span><br><span class="line">bond_active_slave   : []</span><br><span class="line">bond_downdelay      : 0</span><br><span class="line">bond_fake_iface     : <span class="literal">false</span></span><br><span class="line">bond_mode           : []</span><br><span class="line">bond_updelay        : 0</span><br><span class="line">cvlans              : []</span><br><span class="line">external_ids        : &#123;&#125;</span><br><span class="line">fake_bridge         : <span class="literal">false</span></span><br><span class="line">interfaces          : [ebc0b72a-132b-4a56-9269-3ebaec372a8d]</span><br><span class="line">lacp                : []</span><br><span class="line">mac                 : []</span><br><span class="line">name                : <span class="string">&quot;vhuaaeab3c1-34&quot;</span></span><br><span class="line"></span><br><span class="line">compute-1<span class="comment">#  ovs-vsctl list Bridge  | grep -B 20 4edf0fc5-5ccf-44c4-b5f4-0fdaeds12e1b</span></span><br><span class="line">_uuid               : fc94fe9c-e98f-4ca2-9e87-0ab347e4d980</span><br><span class="line">auto_attach         : []</span><br><span class="line">controller          : [d2e2a027-e3a3-4c36-b63e-7a2a61f60f77]</span><br><span class="line">datapath_id         : <span class="string">&quot;00009efefca24c&quot;</span></span><br><span class="line">datapath_type       : netdev</span><br><span class="line">datapath_version    : <span class="string">&quot;&lt;built-in&gt;&quot;</span></span><br><span class="line">external_ids        : &#123;flow-restore=<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">fail_mode           : secure</span><br><span class="line">flood_vlans         : []</span><br><span class="line">flow_tables         : &#123;&#125;</span><br><span class="line">ipfix               : []</span><br><span class="line">mcast_snooping_enable: <span class="literal">false</span></span><br><span class="line">mirrors             : []</span><br><span class="line">name                : br-int</span><br><span class="line">netflow             : []</span><br><span class="line">other_config        : &#123;disable-in-band=<span class="string">&quot;true&quot;</span>, dp-desc=<span class="string">&quot;compute-1&quot;</span>&#125;</span><br><span class="line">ports               : [97d556dc-ae81-49e2-a6ac-e56se122f733, 9dc93112-f63d-4ad3-9b56-b0a97a3425a7, 4edf0fc5-5ccf-44c4-b5f4-0fdaeds12e1b]</span><br></pre></td></tr></table></figure>

<p>After list bridge, i see a familiar name br-int and type is netdev. When i type ip a, i see the br-int as well. The first thought is the message will go out from this netdev. The second thought is how i capture the OVS flow?</p>
<p>Use below command to show the bridge flow.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ovs-appctl dpif/dump-flows  br-int </span><br></pre></td></tr></table></figure>
<p>if we grep the MACVLAN net interface MAC address, we can see the content. And if Openstack use the VXLAN as the flow way, we can see the VNI id as well.</p>
]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>K8s</tag>
        <tag>Openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>O(N²) Sort</title>
    <url>/2022/03/05/Leetcode/</url>
    <content><![CDATA[<h1 id="Backgroud"><a href="#Backgroud" class="headerlink" title="Backgroud"></a>Backgroud</h1><p>Learn basic leetcode knowledage like BubbleSort, InserSort, SelectSort, and see the Java code.</p>
<p>Try revert to python code.</p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><span id="more"></span>

<h2 id="SelecSort"><a href="#SelecSort" class="headerlink" title="SelecSort"></a>SelecSort</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;选择排序</span></span><br><span class="line"><span class="string">实现原理：从一个[0....N-1]数组中，依次遍历，选择最小的值与第一个数进行交换</span></span><br><span class="line"><span class="string">时间复杂度为O(N²)</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">list = input(<span class="string">&quot;Please enter a list, using space to divide&quot;</span>)</span><br><span class="line">lists = list.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lists)</span><br><span class="line"></span><br><span class="line">def SelectSort():</span><br><span class="line">    i = 0</span><br><span class="line">    j = 0</span><br><span class="line">    min = 0</span><br><span class="line">    <span class="keyword">while</span> j &lt; len(lists)-1:</span><br><span class="line">        <span class="keyword">while</span> i &lt; len(lists)-1:</span><br><span class="line">            <span class="keyword">if</span> lists[i+1] &lt; lists[min]:</span><br><span class="line">                min = i+1</span><br><span class="line">            i = i+1</span><br><span class="line">        lists[j], lists[min] = lists[min], lists[j]</span><br><span class="line">        j = j+1</span><br><span class="line">        i = j</span><br><span class="line">    <span class="built_in">print</span>(lists)</span><br><span class="line"></span><br><span class="line">SelectSort()</span><br></pre></td></tr></table></figure>

<p>##BubbleSort</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;冒泡排序</span></span><br><span class="line"><span class="string">实现原理：从左往右遍历，两个数比较，较大的右移, 每次遍历会确定最后一个最大值</span></span><br><span class="line"><span class="string">时间复杂度为O(N²)</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">list = input(<span class="string">&quot;Please enter a list, using space to divide&quot;</span>)</span><br><span class="line">org_list = list.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(org_list)</span><br><span class="line"></span><br><span class="line">j = len(org_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> j &gt; 1:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(j-1):</span><br><span class="line">        <span class="keyword">if</span> org_list[i+1] &lt; org_list[i]:</span><br><span class="line">            org_list[i], org_list[i+1] = org_list[i+1], org_list[i]</span><br><span class="line">        <span class="built_in">print</span>(1)</span><br><span class="line">    j= j-1</span><br><span class="line"><span class="built_in">print</span>(org_list)</span><br></pre></td></tr></table></figure>


<p>##InserSort</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">插入排序，后一个数要是大于前一个，则交换，还要小于前一个，就继续往前交换</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">A = [2, 1, 3, 5, 4, 6, 9, 8, 2, 1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># def compare():</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)-1):</span><br><span class="line">    <span class="keyword">if</span> A[i] &gt; A[i+1]:</span><br><span class="line">        A[i], A[i+1] = A[i+1], A[i]</span><br><span class="line">        <span class="built_in">print</span>(A)</span><br><span class="line">        j = i</span><br><span class="line">        <span class="keyword">while</span> j &gt; 1:</span><br><span class="line">            <span class="keyword">if</span> A[j] &lt; A[j-1]:</span><br><span class="line">                A[j-1], A[j] = A[j], A[j-1]</span><br><span class="line">            j = j - 1</span><br><span class="line">    <span class="built_in">print</span>(A)</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Tank War</title>
    <url>/2022/02/09/Python-Tank-War/</url>
    <content><![CDATA[<h2 id="Backgroud"><a href="#Backgroud" class="headerlink" title="Backgroud"></a>Backgroud</h2><p>Start to review python recently, and find an interesting item. Using pygame to build a Tank War Game.</p>
<p>it’s first time for me to write python project, and i learn very much from this.</p>
<p>Here is the code, i try to follow the vedio to finish this. Maybe somewhere is wrong. Share to you.</p>
<span id="more"></span>

<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">v3</span></span><br><span class="line"><span class="string">定義開始框以及坦克方向</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">載入兩個坦克</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">新增坦克方向變換和移動</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">加入邊界，控制坦克的移動,不需要每次敲鍵盤</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">敵方坦克</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">敵方坦克的隨機移動</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">添加新的類 子彈以及運動 發射</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">解決子彈消失 以及敵方坦克發射子彈</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">實現碰撞</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">實現墻壁</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">import random</span><br><span class="line">import pygame</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">screen_width=800</span><br><span class="line">screnn_hight=500</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个精灵类</span></span><br><span class="line">class BaseItem(pygame.sprite.Sprite):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        <span class="comment"># Call the parent class (Sprite) constructor</span></span><br><span class="line">        pygame.sprite.Sprite.__init__(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MainGame:</span><br><span class="line">    windows = None</span><br><span class="line">    <span class="comment">#定義我方坦克</span></span><br><span class="line">    <span class="comment">#my_tank = pygame.image.load(&#x27;image/My-tank.jpg&#x27;)</span></span><br><span class="line">    <span class="comment">#my_tank_position = my_tank.get_rect()</span></span><br><span class="line">    Tank_P1= None</span><br><span class="line">    Bullet_list = []</span><br><span class="line">    E_Bullet_list = []</span><br><span class="line">    <span class="comment"># Tank_V1= None</span></span><br><span class="line">    Tank_V1_list = []</span><br><span class="line">    <span class="comment">#創建坦克的數量</span></span><br><span class="line">    Tank_V1_count = 6</span><br><span class="line">    Wall_list = []</span><br><span class="line">    Wall_count = 3</span><br><span class="line">    def start_game(self):</span><br><span class="line">        <span class="comment">#定義邊框大小</span></span><br><span class="line">        pygame.display.init()</span><br><span class="line">        MainGame.windows = pygame.display.set_mode(size=(screen_width,screnn_hight),flags=0,depth=0)</span><br><span class="line">        <span class="comment">#定義我方坦克</span></span><br><span class="line">        self.createMyTank()</span><br><span class="line">        self.createEnemyTank()</span><br><span class="line">        self.createWall()</span><br><span class="line">        <span class="comment">#坦克中間位置</span></span><br><span class="line">        <span class="comment"># MainGame.Bullet_P1 = Bullet(395,440)</span></span><br><span class="line">        <span class="comment"># MainGame.Bullet_P1 = Bullet(MainGame.Tank_P1.rect.left+20,MainGame.Tank_P1.rect.top-10)</span></span><br><span class="line">        <span class="comment">#定義標題</span></span><br><span class="line">        pygame.display.set_caption(<span class="string">&quot;坦克大戰v1.0&quot;</span>)</span><br><span class="line">        <span class="comment">#定義持久顯示</span></span><br><span class="line">        <span class="keyword">while</span> True:</span><br><span class="line">            <span class="comment">#定義界面的顔色</span></span><br><span class="line">            MainGame.windows.fill(pygame.Color(0,0,0))</span><br><span class="line">            <span class="comment">#MainGame.windows.blit(self.my_tank,self.my_tank_position)</span></span><br><span class="line">            <span class="keyword">if</span> MainGame.Tank_P1 and MainGame.Tank_P1.live:</span><br><span class="line">                MainGame.Tank_P1.Display_tank()</span><br><span class="line">                <span class="comment"># 通過判斷開關來移動</span></span><br><span class="line">                MainGame.Tank_P1.Hitwall()</span><br><span class="line">                <span class="keyword">if</span> MainGame.Tank_P1.stop == False:</span><br><span class="line">                    MainGame.Tank_P1.move()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                del MainGame.Tank_P1</span><br><span class="line">                MainGame.Tank_P1 = None</span><br><span class="line">            self.showEnemyTank()</span><br><span class="line">            self.showWall()</span><br><span class="line">            <span class="comment"># MainGame.Bullet_P1 = Bullet(MainGame.Tank_P1.rect.left +25, MainGame.Tank_P1.rect.top + 25)</span></span><br><span class="line">            <span class="comment"># MainGame.Bullet_P1.Display_bullet()</span></span><br><span class="line">            <span class="comment">#調用事件，保證全過程監控</span></span><br><span class="line">            self.get_event()</span><br><span class="line">            <span class="comment">#保持移動，但是會一直移動，所以需要添加判斷</span></span><br><span class="line">            <span class="comment"># 通過判斷開關來移動</span></span><br><span class="line">            <span class="comment"># if MainGame.Tank_P1.stop == False and MainGame.Tank_P1:</span></span><br><span class="line">            <span class="comment">#     MainGame.Tank_P1.move()</span></span><br><span class="line">            <span class="comment"># if MainGame.Bullet_P1.bulletstop == False:</span></span><br><span class="line">            <span class="comment">#     MainGame.Bullet_P1.Display_bullet()</span></span><br><span class="line">            <span class="comment">#     pygame.display.update()</span></span><br><span class="line">            <span class="comment">#     MainGame.Bullet_P1.move_bullet()</span></span><br><span class="line">            self.showBullet()</span><br><span class="line">            self.show_E_Bullet()</span><br><span class="line">            <span class="comment">#調用事件，保證全過程監控</span></span><br><span class="line">            self.get_event()</span><br><span class="line">            pygame.display.update()</span><br><span class="line">            time.sleep(0.02)</span><br><span class="line">    def createEnemyTank(self):</span><br><span class="line">        top = 100</span><br><span class="line">        <span class="comment"># speed = random.randint(2,20)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(MainGame.Tank_V1_count):</span><br><span class="line">            speed = random.randint(3, 7)</span><br><span class="line">            left = random.randint(1, 5)</span><br><span class="line">            eTank = EnemyTank(left*100,top,speed)</span><br><span class="line">            MainGame.Tank_V1_list.append(eTank)</span><br><span class="line">            <span class="comment"># print(*MainGame.Tank_V1_list)</span></span><br><span class="line">    def showEnemyTank(self):</span><br><span class="line">        <span class="keyword">for</span> eTank <span class="keyword">in</span> MainGame.Tank_V1_list:</span><br><span class="line">            <span class="keyword">if</span> eTank.live ==True :</span><br><span class="line">                eTank.Display_tank()</span><br><span class="line">                eTank.Hitwall()</span><br><span class="line">                <span class="comment">#定義敵方坦克的移動</span></span><br><span class="line">                eTank.randommove()</span><br><span class="line">                <span class="comment"># 定義子彈</span></span><br><span class="line">                E_Bullet = eTank.E_shot()</span><br><span class="line">                <span class="comment"># 將有意義的子彈加入到list當中</span></span><br><span class="line">                <span class="keyword">if</span> E_Bullet:</span><br><span class="line">                    MainGame.E_Bullet_list.append(E_Bullet)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.Tank_V1_list.remove(eTank)</span><br><span class="line">    def showBullet(self):</span><br><span class="line">        <span class="comment">#將子彈加入到屏幕中</span></span><br><span class="line">        <span class="keyword">for</span> mybullet <span class="keyword">in</span> MainGame.Bullet_list:</span><br><span class="line">            <span class="keyword">if</span> mybullet.live == True:</span><br><span class="line">                mybullet.Display_bullet()</span><br><span class="line">                mybullet.move_bullet()</span><br><span class="line">                mybullet.MyBulletHitEnemyTank()</span><br><span class="line">                mybullet.BulletHitWall()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.Bullet_list.remove(mybullet)</span><br><span class="line">    def show_E_Bullet(self):</span><br><span class="line">        <span class="comment">#將敵方子彈加入屏幕</span></span><br><span class="line">        <span class="comment"># for eTank in MainGame.Tank_V1_list:</span></span><br><span class="line">        <span class="comment">#     E_Bullet = eTank.E_shot()</span></span><br><span class="line">        <span class="comment">#     if E_Bullet:</span></span><br><span class="line">        <span class="comment">#         MainGame.E_Bullet_list.append(E_Bullet)</span></span><br><span class="line">        <span class="keyword">for</span> E_Bullet <span class="keyword">in</span> MainGame.E_Bullet_list:</span><br><span class="line">            <span class="keyword">if</span> E_Bullet.live == True:</span><br><span class="line">                E_Bullet.Display_bullet()</span><br><span class="line">                E_Bullet.move_bullet()</span><br><span class="line">                <span class="keyword">if</span> MainGame.Tank_P1 and MainGame.Tank_P1.live:</span><br><span class="line">                    E_Bullet.EnemyBulletHitMyTank()</span><br><span class="line">                E_Bullet.BulletHitWall()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.E_Bullet_list.remove(E_Bullet)</span><br><span class="line">    def MyTankHitEnemyTank(self):</span><br><span class="line">        <span class="comment"># for EnemyTank in MainGame.Tank_V1_list:</span></span><br><span class="line">        <span class="comment">#     if pygame.sprite.collide_rect(MainGame.Tank_P1,EnemyTank) == 0:</span></span><br><span class="line">        <span class="comment">#         MainGame.Tank_P1.live = False</span></span><br><span class="line">        pass</span><br><span class="line">    def createMyTank(self):</span><br><span class="line">        MainGame.Tank_P1 = Tank(375, 450)</span><br><span class="line">        music = Music(<span class="string">&#x27;image/weibo.mp3&#x27;</span>)</span><br><span class="line">        music.play()</span><br><span class="line"></span><br><span class="line">    def createWall(self):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(MainGame.Wall_count):</span><br><span class="line">            random_left = random.randint(100, 400)</span><br><span class="line">            random_top = random.randint(100, 300)</span><br><span class="line">            random_wall = Wall(random_left, random_top)</span><br><span class="line">            MainGame.Wall_list.append(random_wall)</span><br><span class="line">    def showWall(self):</span><br><span class="line">        <span class="keyword">for</span> random_wall <span class="keyword">in</span> MainGame.Wall_list:</span><br><span class="line">            random_wall.Display_wall()</span><br><span class="line">    <span class="comment">#獲取全部事件</span></span><br><span class="line">    def get_event(self):</span><br><span class="line">            eventlist = pygame.event.get()</span><br><span class="line">            <span class="keyword">for</span> event <span class="keyword">in</span> eventlist:</span><br><span class="line">                <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">                    self.end_game()</span><br><span class="line">                <span class="comment">#另一方方式實現</span></span><br><span class="line">                <span class="comment"># if event.type == pygame.KEYDOWN:</span></span><br><span class="line">                <span class="comment">#     if event.key == pygame.K_LEFT:</span></span><br><span class="line">                <span class="comment">#         print(&quot;你好&quot;)</span></span><br><span class="line">                <span class="comment">#         MainGame.Tank_P1.dirs = &#x27;L&#x27;</span></span><br><span class="line">                <span class="comment">#         MainGame.Tank_P1.move()</span></span><br><span class="line">                <span class="keyword">elif</span> pygame.key.get_pressed()[pygame.K_RIGHT] and MainGame.Tank_P1:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;向右掉頭&quot;</span>)</span><br><span class="line">                    <span class="comment">#修改方向</span></span><br><span class="line">                    MainGame.Tank_P1.dirs = <span class="string">&#x27;R&#x27;</span></span><br><span class="line">                    MainGame.Tank_P1.stop = False</span><br><span class="line">                    <span class="comment"># MainGame.Tank_P1.move()</span></span><br><span class="line">                <span class="keyword">elif</span> pygame.key.get_pressed()[pygame.K_LEFT] and MainGame.Tank_P1:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;向左掉頭&quot;</span>)</span><br><span class="line">                    <span class="comment">#修改方向</span></span><br><span class="line">                    MainGame.Tank_P1.dirs = <span class="string">&#x27;L&#x27;</span></span><br><span class="line">                    MainGame.Tank_P1.stop = False</span><br><span class="line">                    <span class="comment"># MainGame.Tank_P1.move()</span></span><br><span class="line">                <span class="keyword">elif</span> pygame.key.get_pressed()[pygame.K_UP] and MainGame.Tank_P1 :</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;向上掉頭&quot;</span>)</span><br><span class="line">                    <span class="comment">#修改方向</span></span><br><span class="line">                    MainGame.Tank_P1.dirs = <span class="string">&#x27;U&#x27;</span></span><br><span class="line">                    MainGame.Tank_P1.stop = False</span><br><span class="line">                    <span class="comment"># MainGame.Tank_P1.move()</span></span><br><span class="line">                <span class="keyword">elif</span> pygame.key.get_pressed()[pygame.K_DOWN] and MainGame.Tank_P1 :</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;向下掉頭&quot;</span>)</span><br><span class="line">                    <span class="comment">#修改方向</span></span><br><span class="line">                    MainGame.Tank_P1.dirs = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">                    MainGame.Tank_P1.stop = False</span><br><span class="line">                    <span class="comment"># MainGame.Tank_P1.move()</span></span><br><span class="line">                <span class="keyword">elif</span> pygame.key.get_pressed()[pygame.K_SPACE] and MainGame.Tank_P1:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;發射炮彈&quot;</span>)</span><br><span class="line">                    <span class="comment"># 產生一顆子彈</span></span><br><span class="line">                    mybullet = Bullet(MainGame.Tank_P1)</span><br><span class="line">                    <span class="comment">#加入列表</span></span><br><span class="line">                    MainGame.Bullet_list.append(mybullet)</span><br><span class="line">                    <span class="comment"># print(*MainGame.Bullet_list, sep=&#x27;\n&#x27;)</span></span><br><span class="line">                <span class="keyword">elif</span> pygame.key.get_pressed()[pygame.K_ESCAPE] and not MainGame.Tank_P1:</span><br><span class="line">                    self.createMyTank()</span><br><span class="line">                <span class="comment">#控制鬆開鍵盤時停下</span></span><br><span class="line">                <span class="keyword">elif</span> event.type == pygame.KEYUP and MainGame.Tank_P1:</span><br><span class="line">                    <span class="comment">#鬆開是方向鍵才會處理</span></span><br><span class="line">                    <span class="keyword">if</span> event.key == pygame.K_UP or pygame.K_DOWN or pygame.K_LEFT or pygame.K_RIGHT:</span><br><span class="line">                        MainGame.Tank_P1.stop = True</span><br><span class="line"></span><br><span class="line">    def end_game(self):</span><br><span class="line">        <span class="built_in">exit</span>()</span><br><span class="line">class Tank(BaseItem):</span><br><span class="line">    <span class="comment">#定義主函數的參數</span></span><br><span class="line">    def __init__(self,left,top):</span><br><span class="line">        self.images = &#123;</span><br><span class="line">            <span class="string">&#x27;U&#x27;</span>:pygame.image.load(<span class="string">&#x27;image/My-tank.jpg&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;D&#x27;</span>:pygame.image.load(<span class="string">&#x27;image/My-tank-down.jpg&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;L&#x27;</span>:pygame.image.load(<span class="string">&#x27;image/My-tank-left.jpg&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;R&#x27;</span>:pygame.image.load(<span class="string">&#x27;image/My-tank-right.jpg&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        self.dirs = <span class="string">&#x27;U&#x27;</span></span><br><span class="line">        self.Hugeimage = self.images[self.dirs]</span><br><span class="line">        self.image = pygame.transform.smoothscale(self.Hugeimage, (50,50))</span><br><span class="line">        <span class="comment">#定義我方坦克位置信息</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment">#指定坐標以及大小</span></span><br><span class="line">        self.rect.left = left</span><br><span class="line">        self.rect.top = top</span><br><span class="line">        <span class="comment">#self.rect.width = width</span></span><br><span class="line">        <span class="comment">#self.rect.height = height</span></span><br><span class="line">        <span class="comment">#定義移動的速度</span></span><br><span class="line">        self.speed = 5</span><br><span class="line">        <span class="comment">#定義移動的開關</span></span><br><span class="line">        self.stop = True</span><br><span class="line">        self.live = True</span><br><span class="line">    <span class="comment">#定義我方Tank的顯示</span></span><br><span class="line">    def Display_tank(self):</span><br><span class="line">        <span class="comment">#重新定義坦克的圖片</span></span><br><span class="line">        self.Hugeimage = self.images[self.dirs]</span><br><span class="line">        self.image = pygame.transform.smoothscale(self.Hugeimage, (50, 50))</span><br><span class="line">        <span class="comment">#pygame.transform.smoothscale(self.image,(10.10))</span></span><br><span class="line">        <span class="comment">#在窗口進行顯示</span></span><br><span class="line">        MainGame.windows.blit(self.image,self.rect)</span><br><span class="line">    def move(self):</span><br><span class="line">        <span class="comment">#定義之前的位置</span></span><br><span class="line">        self.oldLeft = self.rect.left</span><br><span class="line">        self.oldTop = self.rect.top</span><br><span class="line">        <span class="keyword">if</span> self.dirs == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">            <span class="comment"># 控制邊界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.left &gt; 0:</span><br><span class="line">                <span class="comment"># 向左按一下， 往左移動一個速度</span></span><br><span class="line">                self.rect.left = self.rect.left - self.speed</span><br><span class="line">        <span class="keyword">elif</span> self.dirs == <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">            <span class="comment"># 控制邊界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.left &lt; 740:</span><br><span class="line">                <span class="comment"># 向右按一下， 往右移動一個速度</span></span><br><span class="line">                self.rect.left = self.rect.left + self.speed</span><br><span class="line">        <span class="keyword">elif</span> self.dirs == <span class="string">&#x27;U&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.top &gt; 0:</span><br><span class="line">                self.rect.top = self.rect.top - self.speed</span><br><span class="line">        <span class="keyword">elif</span> self.dirs == <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.top &lt; 440:</span><br><span class="line">                self.rect.top = self.rect.top + self.speed</span><br><span class="line">    def shot(self):</span><br><span class="line">        <span class="built_in">return</span> Bullet(self)</span><br><span class="line">    def Hitwall(self):</span><br><span class="line">        <span class="keyword">for</span> random_wall <span class="keyword">in</span> MainGame.Wall_list:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(self, random_wall):</span><br><span class="line">                self.stay()</span><br><span class="line">    def stay(self):</span><br><span class="line">        self.rect.left = self.oldLeft</span><br><span class="line">        self.rect.top = self.oldTop</span><br><span class="line"></span><br><span class="line">class EnemyTank(Tank):</span><br><span class="line">    def __init__(self,left,top,speed):</span><br><span class="line">        self.live = True</span><br><span class="line">        self.images= &#123;</span><br><span class="line">            <span class="string">&#x27;U&#x27;</span>: pygame.image.load(<span class="string">&#x27;image/Dui-tank-up.jpg&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;D&#x27;</span>: pygame.image.load(<span class="string">&#x27;image/Dui-tank-down.jpg&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;L&#x27;</span>: pygame.image.load(<span class="string">&#x27;image/Dui-tank-left.jpg&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;R&#x27;</span>: pygame.image.load(<span class="string">&#x27;image/Dui-tank-right.jpg&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        self.dirs = self.dir()</span><br><span class="line">        self.Hugeimage = self.images[self.dirs]</span><br><span class="line">        self.image = pygame.transform.smoothscale(self.Hugeimage, (50, 50))</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.rect.left = left</span><br><span class="line">        self.rect.top = top</span><br><span class="line">        self.speed = speed</span><br><span class="line">        self.stop = True</span><br><span class="line">        self.step = 20</span><br><span class="line">    <span class="comment"># def DisplayEnemyTank(self):</span></span><br><span class="line">        <span class="comment"># #重新定義坦克的圖片</span></span><br><span class="line">        <span class="comment"># self.Hugeimage = self.images[self.dirs]</span></span><br><span class="line">        <span class="comment"># self.image = pygame.transform.smoothscale(self.Hugeimage, (50, 50))</span></span><br><span class="line">        <span class="comment"># #pygame.transform.smoothscale(self.image,(10.10))</span></span><br><span class="line">        <span class="comment"># #在窗口進行顯示</span></span><br><span class="line">        <span class="comment"># MainGame.windows.blit(self.image,self.rect)</span></span><br><span class="line">    def dir(self):</span><br><span class="line">        num = random.randint(1,4)</span><br><span class="line">        <span class="comment"># self.direction = &#123;</span></span><br><span class="line">        <span class="comment">#     1: &#x27;U&#x27;,</span></span><br><span class="line">        <span class="comment">#     2: &#x27;D&#x27;,</span></span><br><span class="line">        <span class="comment">#     3: &#x27;L&#x27;,</span></span><br><span class="line">        <span class="comment">#     4: &#x27;R&#x27;</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line">        <span class="comment"># return self.direction[num]</span></span><br><span class="line">        <span class="keyword">if</span> num == 3:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&#x27;U&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> num == 4:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> num == 1:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&#x27;L&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> num == 2:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">&#x27;R&#x27;</span></span><br><span class="line">    <span class="comment">##定義隨機移動</span></span><br><span class="line">    def randommove(self):</span><br><span class="line">        <span class="comment">#黨步數走完之後,改變方向</span></span><br><span class="line">        <span class="keyword">if</span> self.step &lt;= 0 :</span><br><span class="line">            self.dirs = self.dir()</span><br><span class="line">            self.step = 20</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.move()</span><br><span class="line">            self.step -= 1</span><br><span class="line">    def E_shot(self):</span><br><span class="line">        num = random.randint(1, 100)</span><br><span class="line">        <span class="keyword">if</span> num == 4:</span><br><span class="line">            <span class="built_in">return</span> Bullet(self)</span><br><span class="line"></span><br><span class="line">class Bullet(BaseItem):</span><br><span class="line">    def __init__(self, tank):</span><br><span class="line">        <span class="comment">#圖片</span></span><br><span class="line">        self.bullets = &#123;</span><br><span class="line">            <span class="string">&#x27;type1&#x27;</span>: pygame.image.load(<span class="string">&#x27;image/bullet.jpg&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;type2&#x27;</span>: pygame.image.load(<span class="string">&#x27;image/bullet2.jpg&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;type3&#x27;</span>: pygame.image.load(<span class="string">&#x27;image/Dui-tank-up.jpg&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        self.Hugebullet = self.bullets[<span class="string">&#x27;type1&#x27;</span>]</span><br><span class="line">        self.bullet = pygame.transform.smoothscale(self.Hugebullet, (10, 10))</span><br><span class="line">        self.bulletdir = tank.dirs</span><br><span class="line">        self.rect = self.bullet.get_rect()</span><br><span class="line">        self.live = True</span><br><span class="line">        <span class="comment"># self.bulletrect.left = left</span></span><br><span class="line">        <span class="comment"># self.bulletrect.top = top</span></span><br><span class="line">        <span class="comment"># if self.bulletdir == &#x27;U&#x27;:</span></span><br><span class="line">        <span class="comment">#     self.bulletrect.left = tank.rect.left + tank.rect.width/2 - self.bulletrect.width/2</span></span><br><span class="line">        <span class="comment">#     self.bulletrect.top = tank.rect.top - self.bulletrect.height</span></span><br><span class="line">        <span class="comment"># elif self.bulletdir == &#x27;D&#x27;:</span></span><br><span class="line">        <span class="comment">#     self.bulletrect.left = tank.rect.left + tank.rect.width/2 - self.bulletrect.width/2</span></span><br><span class="line">        <span class="comment">#     self.bulletrect.top = tank.rect.top + self.bulletrect.height</span></span><br><span class="line">        <span class="comment"># elif self.bulletdir == &#x27;L&#x27;:</span></span><br><span class="line">        <span class="comment">#     self.bulletrect.left = tank.rect.left - tank.rect.width/2 - self.bulletrect.width/2</span></span><br><span class="line">        <span class="comment">#     self.bulletrect.top = tank.rect.top + self.bulletrect.height</span></span><br><span class="line">        <span class="comment"># elif self.bulletdir == &#x27;R&#x27;:</span></span><br><span class="line">        <span class="comment">#     self.bulletrect.left = tank.rect.left + tank.rect.width</span></span><br><span class="line">        <span class="comment">#     self.bulletrect.top = tank.rect.top - tank.rect.width/2 - self.bulletrect.width/2</span></span><br><span class="line">        <span class="keyword">if</span> self.bulletdir == <span class="string">&#x27;U&#x27;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left + tank.rect.width / 2 - self.rect.width / 2</span><br><span class="line">            self.rect.top = tank.rect.top - self.rect.height</span><br><span class="line">        <span class="keyword">elif</span> self.bulletdir == <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left + tank.rect.width / 2 - self.rect.width / 2</span><br><span class="line">            self.rect.top = tank.rect.top + tank.rect.height</span><br><span class="line">        <span class="keyword">elif</span> self.bulletdir == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left - self.rect.width / 2 - self.rect.width / 2</span><br><span class="line">            self.rect.top = tank.rect.top + tank.rect.height / 2 - self.rect.width / 2</span><br><span class="line">        <span class="keyword">elif</span> self.bulletdir == <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left + tank.rect.width</span><br><span class="line">            self.rect.top = tank.rect.top + tank.rect.height / 2 - self.rect.width / 2</span><br><span class="line">        self.bulletspeed = 10</span><br><span class="line">        <span class="comment"># self.bulletstop = True</span></span><br><span class="line">    def Display_bullet(self):</span><br><span class="line">        <span class="comment"># self.Hugebullet = self.bullets[&#x27;type2&#x27;]</span></span><br><span class="line">        <span class="comment"># self.bullet = pygame.transform.smoothscale(self.Hugebullet, (10, 10))</span></span><br><span class="line">        MainGame.windows.blit(self.bullet,self.rect)</span><br><span class="line">    def move_bullet(self):</span><br><span class="line">        <span class="comment"># if MainGame.Tank_P1.dirs == &#x27;U&#x27;:</span></span><br><span class="line">        <span class="comment">#     self.bulletrect.top = self.bulletrect.top - self.bulletspeed</span></span><br><span class="line">        <span class="keyword">if</span> self.bulletdir == <span class="string">&#x27;U&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.top &gt; 0:</span><br><span class="line">                self.rect.top -= self.bulletspeed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.live = False</span><br><span class="line">        <span class="keyword">elif</span> self.bulletdir == <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.left + self.rect.width &lt; screen_width:</span><br><span class="line">                self.rect.left += self.bulletspeed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.live = False</span><br><span class="line">        <span class="keyword">elif</span> self.bulletdir == <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.top + self.rect.height &lt; screnn_hight:</span><br><span class="line">                self.rect.top += self.bulletspeed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.live = False</span><br><span class="line">        <span class="keyword">elif</span> self.bulletdir == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.left &gt; 0:</span><br><span class="line">                self.rect.left -= self.bulletspeed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.live = False</span><br><span class="line">    <span class="comment"># def EnemyBulletHitMyTank(self):</span></span><br><span class="line">    <span class="comment">#     for EnemyBullet in MainGame.E_Bullet_list:</span></span><br><span class="line">    <span class="comment">#         if pygame.sprite.collide_rect(MainGame.Tank_P1,EnemyBullet) == 0:</span></span><br><span class="line">    <span class="comment">#             MainGame.Tank_P1.live = False</span></span><br><span class="line">    <span class="comment">#             self.live = False</span></span><br><span class="line">    <span class="comment">#增加我方子彈命中敵方坦克的方法</span></span><br><span class="line">    def MyBulletHitEnemyTank(self):</span><br><span class="line">        <span class="keyword">for</span> eTank <span class="keyword">in</span> MainGame.Tank_V1_list:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(eTank, self):</span><br><span class="line">                eTank.live = False</span><br><span class="line">                self.live = False</span><br><span class="line">    <span class="comment">#增加敵方子彈命中我方坦克的方法</span></span><br><span class="line">    def EnemyBulletHitMyTank(self):</span><br><span class="line">        <span class="keyword">if</span> pygame.sprite.collide_rect(self, MainGame.Tank_P1):</span><br><span class="line">            self.live = False</span><br><span class="line">            MainGame.Tank_P1.live = False</span><br><span class="line">    <span class="comment">#增加子彈碰到墻壁的方法</span></span><br><span class="line">    def BulletHitWall(self):</span><br><span class="line">        <span class="keyword">for</span> random_wall <span class="keyword">in</span> MainGame.Wall_list:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(random_wall, self):</span><br><span class="line">                self.live = False</span><br><span class="line">    <span class="comment"># def EnemyBulletHitWall(self):</span></span><br><span class="line">    <span class="comment">#     for random_wall in MainGame.Wall_list:</span></span><br><span class="line">    <span class="comment">#         if pygame.sprite.collide_rect(random_wall, self):</span></span><br><span class="line">    <span class="comment">#             self.live = False</span></span><br><span class="line"></span><br><span class="line">class Wall(BaseItem):</span><br><span class="line">    def __init__(self,left,top):</span><br><span class="line">        self.HugeWallimage = pygame.image.load(<span class="string">&#x27;image/wall.png&#x27;</span>)</span><br><span class="line">        self.Wallimage = pygame.transform.smoothscale(self.HugeWallimage, (100, 20))</span><br><span class="line">        self.rect = self.Wallimage.get_rect()</span><br><span class="line">        self.rect.left = left</span><br><span class="line">        self.rect.top = top</span><br><span class="line">    def Display_wall(self):</span><br><span class="line">        MainGame.windows.blit(self.Wallimage,self.rect)</span><br><span class="line"></span><br><span class="line">class Music():</span><br><span class="line">    def __init__(self,filename):</span><br><span class="line">        <span class="comment">##初始化混響器</span></span><br><span class="line">        self.filename = filename</span><br><span class="line">        pygame.mixer.init()</span><br><span class="line">        pygame.mixer.music.load(self.filename)</span><br><span class="line">    def play(self):</span><br><span class="line">        pygame.mixer.music.play()</span><br><span class="line"></span><br><span class="line">game = MainGame()</span><br><span class="line">game.start_game()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Create-blog</title>
    <url>/2021/12/20/create-blog/</url>
    <content><![CDATA[<h2 id="Backgroud"><a href="#Backgroud" class="headerlink" title="Backgroud"></a>Backgroud</h2><p>Want to record something i learn from my job.</p>
<h2 id="How-do-i-start-a-blog"><a href="#How-do-i-start-a-blog" class="headerlink" title="How do i start a blog"></a>How do i start a blog</h2><span id="more"></span>

<h3 id="Install-Git-bash-and-NodeJs-on-Win"><a href="#Install-Git-bash-and-NodeJs-on-Win" class="headerlink" title="Install Git bash and NodeJs on Win"></a>Install Git bash and NodeJs on Win</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://git-scm.com/download/win</span><br><span class="line">https://nodejs.org/en/download/</span><br></pre></td></tr></table></figure>
<p>Keep Moving with Next !</p>
<h3 id="Using-Hexo-create-local-blog"><a href="#Using-Hexo-create-local-blog" class="headerlink" title="Using Hexo create local blog"></a>Using Hexo create local blog</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<p>Call view the Hexo on localhost !</p>
<h3 id="Set-Git-info-and-copy-SSH-Key-to-GitHub"><a href="#Set-Git-info-and-copy-SSH-Key-to-GitHub" class="headerlink" title="Set Git info and copy SSH Key to GitHub"></a>Set Git info and copy SSH Key to GitHub</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Firstlly, need create a Github account!</span><br><span class="line"></span><br><span class="line">$ git config --global user.name=<span class="string">&quot;user.name&quot;</span></span><br><span class="line">$ git config --global user.email=<span class="string">&quot;mail.address&quot;</span></span><br><span class="line">$ git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;mail.address&quot;</span></span><br><span class="line"></span><br><span class="line">Create a SSH Key on Github and copy the generated key into.</span><br></pre></td></tr></table></figure>
<p>Can ssh <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#109;">&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#109;</a> !</p>
<h3 id="Upload-local-blog-to-remote-sites"><a href="#Upload-local-blog-to-remote-sites" class="headerlink" title="Upload local blog to remote sites"></a>Upload local blog to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">Edit the _config.yml under blog/ , change deploy to below:</span><br><span class="line"></span><br><span class="line"> deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: <span class="string">&#x27;Self Repository URL&#x27;</span></span><br><span class="line">  branch: main</span><br><span class="line"></span><br><span class="line">$ hexo d </span><br></pre></td></tr></table></figure>

<p>Check your blow using the pages address which find under setting !</p>
<p>Note: Meet the jekyll failed with theme not found, install the ruby to troubleshooter. And situation become more trouble, the faster is to delete blog folder and do again above..</p>
]]></content>
  </entry>
  <entry>
    <title>Trace all node</title>
    <url>/2021/12/25/Trace-all-node/</url>
    <content><![CDATA[<h2 id="Backgroud"><a href="#Backgroud" class="headerlink" title="Backgroud"></a>Backgroud</h2><p>Due to K8s cluster has daemonset pod, if want to capture all node traffic, need login each node and tcpdump.</p>
<p>Here is a shell script to solve this. </p>
<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><span id="more"></span>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#path to store captures</span></span><br><span class="line">storePath=$(readlink -f <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">nodes[1]=<span class="string">&#x27;192.168.12.30&#x27;</span></span><br><span class="line">nodes[2]=<span class="string">&#x27;192.168.12.25&#x27;</span></span><br><span class="line">nodes[3]=<span class="string">&#x27;192.168.12.10&#x27;</span></span><br><span class="line">nodes[4]=<span class="string">&#x27;192.168.12.19&#x27;</span></span><br><span class="line">nodes[5]=<span class="string">&#x27;192.168.12.17&#x27;</span></span><br><span class="line">nodes[6]=<span class="string">&#x27;192.168.12.24&#x27;</span></span><br><span class="line">nodes[7]=<span class="string">&#x27;192.168.12.21&#x27;</span></span><br><span class="line">nodes[8]=<span class="string">&#x27;192.168.12.31&#x27;</span></span><br><span class="line">nodes[9]=<span class="string">&#x27;192.168.12.8&#x27;</span></span><br><span class="line">nodes[10]=<span class="string">&#x27;192.168.12.12&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;start&quot;</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;nodes[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  ssh <span class="variable">$p</span> sudo tcpdump -s0 -i eth1 net 192.168.12.0/24 -w capture-<span class="variable">$p</span>.pcap -G 900 -W 1  &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;tcpdump started on <span class="variable">$p</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;stop&quot;</span> ];</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;nodes[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">                tcpdumpPID=`ssh <span class="variable">$p</span> ps aux | grep <span class="variable">$p</span> | grep tcpdump | grep -v grep  | awk <span class="string">&#x27;(NR==2) &#123;print $2&#125;&#x27;</span>`</span><br><span class="line">                ssh <span class="variable">$p</span> sudo <span class="built_in">kill</span> <span class="variable">$tcpdumpPID</span></span><br><span class="line">                scp yanzu@<span class="variable">$p</span>:/home/yanzu/capture-<span class="variable">$p</span>.pcap <span class="variable">$storePath</span></span><br><span class="line">                ssh <span class="variable">$p</span> sudo rm /home/yanzu/capture-<span class="variable">$p</span>.pcap</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;tcpdump is stopped on <span class="variable">$p</span>&quot;</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;The usage is ./tcpdumpTraces.sh &lt;start/stop&gt;&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>K8s</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh-tool</title>
    <url>/2022/05/10/ssh-tool/</url>
    <content><![CDATA[<h1 id="Backgroud"><a href="#Backgroud" class="headerlink" title="Backgroud"></a>Backgroud</h1><p>If we face many node to maintain, and want login without remember flexible password.</p>
<p>Please try below script! Just add node info on a txt file, and replace the path of txt file on the script ! Then you can login the node you want!</p>
<p>Put it on the /usr/bin/, and create a new bash autocomplete. Can login node everywhere!</p>
<h1 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h1><span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></span><br><span class="line"><span class="comment">#Version: 1.0</span></span><br><span class="line"><span class="comment">#Author: Yanzu Wang</span></span><br><span class="line"><span class="comment"># 抄袭部分From Min</span></span><br><span class="line"><span class="comment"># Version 1.0 实现读取node_file中的某一行，进行ssh登录</span></span><br><span class="line"><span class="comment"># Version 2.0 实现删除Knowhost/需要输入确认</span></span><br><span class="line"><span class="comment"># Version 3.0 加入 -h 方法,csv方法</span></span><br><span class="line"><span class="comment"># Version 4.0 修复密码为空时无法登录的问题; 修复登录之后winzize过于小的问题</span></span><br><span class="line"></span><br><span class="line">import pexpect, sys, os, csv</span><br><span class="line"></span><br><span class="line">node_file = <span class="string">&#x27;/home/test/eaajnwi/node_file&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login(node):</span><br><span class="line">    f = open(node_file)</span><br><span class="line">    node_info = []</span><br><span class="line">    winsize = getwinsize()</span><br><span class="line">    <span class="comment">#lines = f.readlines()</span></span><br><span class="line">    <span class="comment">#for line in lines:</span></span><br><span class="line">    <span class="comment">#    if line.split(&quot;,&quot;)[0] == str(sys.argv[1]):</span></span><br><span class="line">    <span class="comment">#        node_info = line.split(&quot;,&quot;)</span></span><br><span class="line">    lines = csv.reader(f)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> line[0] == str(sys.argv[1]):</span><br><span class="line">            node_info = line</span><br><span class="line">    <span class="keyword">if</span> len(node_info) == 0:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error: No Such Node find on the node_file !&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Please use s8 --help or -h to check usage !&quot;</span>)</span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">        </span><br><span class="line">    node_ip = node_info[1]</span><br><span class="line">    username = node_info[2]</span><br><span class="line">    password = node_info[3]</span><br><span class="line">    port = node_info[4]</span><br><span class="line"></span><br><span class="line"><span class="comment"># #基于paramiko实现</span></span><br><span class="line"><span class="comment"># # ssh = paramiko.SSHClient()</span></span><br><span class="line"><span class="comment"># # ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span></span><br><span class="line"><span class="comment"># # ssh.connect(node_ip,int(port),username,password,timeout=10)</span></span><br><span class="line"><span class="comment"># # # stdin：标准输入（就是你输入的命令）；stdout：标准输出（就是命令执行结果）；stderr:标准错误（命令执行过程中如果出错了就把错误打到这里），stdout和stderr仅会输出一个</span></span><br><span class="line"><span class="comment"># # stdin, stdout, stderr = ssh.exec_command(&#x27;pwd&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#基于pexpect实现</span></span><br><span class="line">    ssh_node = pexpect.spawn(<span class="string">&#x27;ssh -p %s %s@%s&#x27;</span> % (port,username,node_ip))</span><br><span class="line">    ssh_node.setwinsize(winsize[1], winsize[0])</span><br><span class="line">    try:</span><br><span class="line">        i = ssh_node.expect([<span class="string">&#x27;.*Are you sure you want to continue connecting (yes/no)?&#x27;</span>,<span class="string">&#x27;.*assword.*&#x27;</span>,<span class="string">&#x27;Host key verification failed.&#x27;</span>,<span class="string">&#x27;Last login.*&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> i == 0:</span><br><span class="line">            ssh_node.sendline(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">            i = ssh_node.expect([<span class="string">&#x27;.*Are you sure you want to continue connecting (yes/no)?&#x27;</span>,<span class="string">&#x27;.*assword.*&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> i == 1:</span><br><span class="line">            ssh_node.sendline(password)</span><br><span class="line">        <span class="comment"># 判断Know host是否存在</span></span><br><span class="line">        <span class="keyword">if</span> i == 2:</span><br><span class="line">            know_host_path = os.path.expandvars(<span class="string">&#x27;$HOME&#x27;</span>)</span><br><span class="line">            <span class="comment"># ssh_node.sendline(&#x27;ssh-keygen -f &quot;%s/.ssh/known_hosts&quot; -R &quot;%s&quot;&#x27; % (know_host_path, node_ip))</span></span><br><span class="line">            os.system(<span class="string">&#x27;ssh-keygen -f &quot;%s/.ssh/known_hosts&quot; -R &quot;%s&quot;&#x27;</span> % (know_host_path, node_ip))</span><br><span class="line">            i = ssh_node.expect([<span class="string">&#x27;.*Are you sure you want to continue connecting (yes/no)?&#x27;</span>, <span class="string">&#x27;.*assword.*&#x27;</span>,<span class="string">&#x27;Host key verification failed.&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> i == 4:</span><br><span class="line">        <span class="comment"># 如果密码为空, 已经免密登录的时候</span></span><br><span class="line">            ssh_node.sendline(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    except IOError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error, please check the node info !&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ssh_node.expect(<span class="string">&#x27;.*&#x27;</span>)</span><br><span class="line">        ssh_node.sendline(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        ssh_node.interact()</span><br><span class="line">        ssh_node.close()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">def list():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Below output are available nodes to login:   &quot;</span>)</span><br><span class="line">    os.system(<span class="string">&#x27;cat %s | awk -F \&#x27;</span>,\<span class="string">&#x27; \&#x27;</span>&#123;<span class="keyword">if</span>(<span class="variable">$1</span>!=\&quot; \&quot;)<span class="built_in">print</span> <span class="variable">$1</span>&#125;\<span class="string">&#x27;&#x27;</span> % node_file)</span><br><span class="line"></span><br><span class="line">def usage(s8name):</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;This is used for quickly login nodes based on special node name in the file:\&quot;%s\&quot;&quot;</span> % node_file)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Usage: %s node [-h] [-l \&quot;clis\&quot;]&quot;</span>%s8name)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Options:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;  node    Node     Set node name to login&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;  -h      Help     Show the help&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;  -l      CLI      List available nodes to login&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Example:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;-----------------------------------\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;  Login the node hk:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;  user@host&gt; %s hk\n&quot;</span>%s2name)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;  Login the node hk and perform clis:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;-----------------------------------\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Nodes info can be updated into file:%s&quot;</span>% node_file)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Format in the file:node_name,ip,user,password,port&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Options:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;1.Node name must be unique in the file!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;2.If no special port,set default 22!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;3.Password can be empty!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;An example without password:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;hk,192.168.10.5,admin,,22\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;4.If password contain comma, please use quotation marked!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;An example if password with comma:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;hk,192.168.10.5,admin,&#x27;Test,tree,on&#x27;,22\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">def getwinsize():</span><br><span class="line">    columns, rows = os.get_terminal_size(0)</span><br><span class="line">    <span class="built_in">return</span> columns, rows</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> str(sys.argv[1]) <span class="keyword">in</span> (<span class="string">&#x27;-h&#x27;</span>):</span><br><span class="line">        usage(<span class="string">&#x27;s8&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> str(sys.argv[1]) <span class="keyword">in</span> (<span class="string">&#x27;-l&#x27;</span>):</span><br><span class="line">        list()</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) &lt; 2:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;ERROR: missing node name&quot;</span>)</span><br><span class="line">        usage(<span class="string">&#x27;s8&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        login(str(sys.argv[1]))</span><br></pre></td></tr></table></figure>

<h1 id="Autocomlete"><a href="#Autocomlete" class="headerlink" title="Autocomlete"></a>Autocomlete</h1><p>实现Tab 补全, 可自动弹出node名称.  在/etc/bash_completion.d/下新建文件 例S8_compelte，添加以下内容.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s8 completion</span></span><br><span class="line"><span class="comment">#   </span></span><br><span class="line"><span class="function"><span class="title">_login_s8</span></span>()  </span><br><span class="line">&#123;       </span><br><span class="line">    node_file=/home/<span class="built_in">test</span>/eaajnwi/node_file</span><br><span class="line">    <span class="keyword">if</span> [ -f  <span class="variable">$node_file</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">local</span> pre cur opts</span><br><span class="line">        <span class="built_in">local</span> node_name_list=(`cat <span class="variable">$node_file</span> | grep -vE <span class="string">&quot;^#&quot;</span> | awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;if($1!=&quot; &quot;)print $1&#125;&#x27;</span> | awk BEGIN&#123;RS=EOF&#125;<span class="string">&#x27;&#123;gsub(/\n/,&quot; &quot;);print&#125;&#x27;</span>`)</span><br><span class="line">        COMPREPLY=()</span><br><span class="line">        pre=<span class="variable">$&#123;COMP_WORDS[COMP_CWORD-1]&#125;</span></span><br><span class="line">        cur=<span class="variable">$&#123;COMP_WORDS[COMP_CWORD]&#125;</span> </span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$pre</span>&quot;</span> == <span class="string">&quot;./s8&quot;</span> -o <span class="string">&quot;<span class="variable">$pre</span>&quot;</span> == <span class="string">&quot;s8&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">            opts=<span class="variable">$&#123;node_name_list[*]&#125;</span></span><br><span class="line">            COMPREPLY=( $( compgen -W <span class="string">&quot;<span class="variable">$opts</span>&quot;</span> -- <span class="variable">$cur</span> ) )</span><br><span class="line">        <span class="keyword">elif</span> [ `cat <span class="string">&quot;<span class="variable">$node_file</span>&quot;</span> | grep -wEc <span class="string">&quot;^<span class="variable">$pre</span>&quot;</span>` -eq <span class="string">&quot;1&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">            <span class="comment">#opts=&quot;-c &quot;</span></span><br><span class="line">            COMPREPLY=( $( compgen -W <span class="string">&quot;<span class="variable">$opts</span>&quot;</span> -- <span class="variable">$cur</span> ) )</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            opts=<span class="variable">$&#123;node_name_list[*]&#125;</span></span><br><span class="line">            COMPREPLY=( $( compgen -W <span class="string">&quot;<span class="variable">$opts</span>&quot;</span> -- <span class="variable">$cur</span> ) )</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line">complete -F _login_s8 <span class="variable">$filenames</span>  s8</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
